'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _bluebird = require('bluebird');

var _awsSdk = require('aws-sdk');

var _awsSdk2 = _interopRequireDefault(_awsSdk);

var _debug = require('debug');

var _debug2 = _interopRequireDefault(_debug);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _s = require('s3');

var _s2 = _interopRequireDefault(_s);

var _oraHandler = require('../util/ora-handler');

var _oraHandler2 = _interopRequireDefault(_oraHandler);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const d = (0, _debug2.default)('electron-forge:publish:s3');

_awsSdk2.default.util.update(_awsSdk2.default.S3.prototype, {
  addExpect100Continue: function addExpect100Continue() {
    // Hack around large upload issue: https://github.com/andrewrk/node-s3-client/issues/74
  }
});

exports.default = (() => {
  var _ref = (0, _bluebird.coroutine)(function* (artifacts, packageJSON, forgeConfig, authToken, tag) {
    const s3Config = forgeConfig.s3;
    s3Config.secretAccessKey = s3Config.secretAccessKey || authToken;
    if (!(s3Config.accessKeyId && s3Config.secretAccessKey && s3Config.bucket)) {
      throw 'In order to publish to s3 you must set the "s3.accessKeyId", "process.env.ELECTRON_FORGE_S3_SECRET_ACCESS_KEY" and "s3.bucket" properties in your forge config. See the docs for more info'; // eslint-disable-line
    }

    d('creating s3 client with options:', s3Config);

    const client = _s2.default.createClient({
      s3Client: new _awsSdk2.default.S3({
        accessKeyId: s3Config.accessKeyId || process.env.AWS_ACCESS_KEY_ID,
        secretAccessKey: s3Config.secretAccessKey || process.env.AWS_SECRET_ACCESS_KEY
      })
    });
    client.s3.addExpect100Continue = function () {};

    const folder = s3Config.folder || tag || packageJSON.version;

    let uploaded = 0;
    yield (0, _oraHandler2.default)(`Uploading Artifacts ${uploaded}/${artifacts.length}`, (() => {
      var _ref2 = (0, _bluebird.coroutine)(function* (uploadSpinner) {
        const updateSpinner = function updateSpinner() {
          uploadSpinner.text = `Uploading Artifacts ${uploaded}/${artifacts.length}`; // eslint-disable-line
        };

        yield _promise2.default.all(artifacts.map(function (artifactPath) {
          return new _promise2.default((() => {
            var _ref3 = (0, _bluebird.coroutine)(function* (resolve, reject) {
              const done = function done(err) {
                if (err) return reject(err);
                uploaded += 1;
                updateSpinner();
                resolve();
              };

              const uploader = client.uploadFile({
                localFile: artifactPath,
                s3Params: {
                  Bucket: s3Config.bucket,
                  Key: `${folder}/${_path2.default.basename(artifactPath)}`,
                  ACL: s3Config.public ? 'public-read' : 'private'
                }
              });
              d('uploading:', artifactPath);

              uploader.on('error', function (err) {
                return done(err);
              });
              uploader.on('progress', function () {
                d(`Upload Progress (${_path2.default.basename(artifactPath)}) ${Math.round(uploader.progressAmount / uploader.progressTotal * 100)}%`);
              });
              uploader.on('end', function () {
                return done();
              });
            });

            return function (_x7, _x8) {
              return _ref3.apply(this, arguments);
            };
          })());
        }));
      });

      return function (_x6) {
        return _ref2.apply(this, arguments);
      };
    })());
  });

  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInB1Ymxpc2hlcnMvczMuanMiXSwibmFtZXMiOlsiZCIsInV0aWwiLCJ1cGRhdGUiLCJTMyIsInByb3RvdHlwZSIsImFkZEV4cGVjdDEwMENvbnRpbnVlIiwiYXJ0aWZhY3RzIiwicGFja2FnZUpTT04iLCJmb3JnZUNvbmZpZyIsImF1dGhUb2tlbiIsInRhZyIsInMzQ29uZmlnIiwiczMiLCJzZWNyZXRBY2Nlc3NLZXkiLCJhY2Nlc3NLZXlJZCIsImJ1Y2tldCIsImNsaWVudCIsImNyZWF0ZUNsaWVudCIsInMzQ2xpZW50IiwicHJvY2VzcyIsImVudiIsIkFXU19BQ0NFU1NfS0VZX0lEIiwiQVdTX1NFQ1JFVF9BQ0NFU1NfS0VZIiwiZm9sZGVyIiwidmVyc2lvbiIsInVwbG9hZGVkIiwibGVuZ3RoIiwidXBsb2FkU3Bpbm5lciIsInVwZGF0ZVNwaW5uZXIiLCJ0ZXh0IiwiYWxsIiwibWFwIiwicmVzb2x2ZSIsInJlamVjdCIsImRvbmUiLCJlcnIiLCJ1cGxvYWRlciIsInVwbG9hZEZpbGUiLCJsb2NhbEZpbGUiLCJhcnRpZmFjdFBhdGgiLCJzM1BhcmFtcyIsIkJ1Y2tldCIsIktleSIsImJhc2VuYW1lIiwiQUNMIiwicHVibGljIiwib24iLCJNYXRoIiwicm91bmQiLCJwcm9ncmVzc0Ftb3VudCIsInByb2dyZXNzVG90YWwiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQUFBOzs7O0FBQ0E7Ozs7QUFDQTs7OztBQUNBOzs7O0FBRUE7Ozs7OztBQUVBLE1BQU1BLElBQUkscUJBQU0sMkJBQU4sQ0FBVjs7QUFFQSxpQkFBSUMsSUFBSixDQUFTQyxNQUFULENBQWdCLGlCQUFJQyxFQUFKLENBQU9DLFNBQXZCLEVBQWtDO0FBQ2hDQyx3QkFBc0IsU0FBU0Esb0JBQVQsR0FBZ0M7QUFDcEQ7QUFDRDtBQUgrQixDQUFsQzs7O3NDQU1lLFdBQU9DLFNBQVAsRUFBa0JDLFdBQWxCLEVBQStCQyxXQUEvQixFQUE0Q0MsU0FBNUMsRUFBdURDLEdBQXZELEVBQStEO0FBQzVFLFVBQU1DLFdBQVdILFlBQVlJLEVBQTdCO0FBQ0FELGFBQVNFLGVBQVQsR0FBMkJGLFNBQVNFLGVBQVQsSUFBNEJKLFNBQXZEO0FBQ0EsUUFBSSxFQUFFRSxTQUFTRyxXQUFULElBQXdCSCxTQUFTRSxlQUFqQyxJQUFvREYsU0FBU0ksTUFBL0QsQ0FBSixFQUE0RTtBQUMxRSxZQUFNLDRMQUFOLENBRDBFLENBQzBIO0FBQ3JNOztBQUVEZixNQUFFLGtDQUFGLEVBQXNDVyxRQUF0Qzs7QUFFQSxVQUFNSyxTQUFTLFlBQUdDLFlBQUgsQ0FBZ0I7QUFDN0JDLGdCQUFVLElBQUksaUJBQUlmLEVBQVIsQ0FBVztBQUNuQlcscUJBQWFILFNBQVNHLFdBQVQsSUFBd0JLLFFBQVFDLEdBQVIsQ0FBWUMsaUJBRDlCO0FBRW5CUix5QkFBaUJGLFNBQVNFLGVBQVQsSUFBNEJNLFFBQVFDLEdBQVIsQ0FBWUU7QUFGdEMsT0FBWDtBQURtQixLQUFoQixDQUFmO0FBTUFOLFdBQU9KLEVBQVAsQ0FBVVAsb0JBQVYsR0FBaUMsWUFBTSxDQUFFLENBQXpDOztBQUVBLFVBQU1rQixTQUFTWixTQUFTWSxNQUFULElBQW1CYixHQUFuQixJQUEwQkgsWUFBWWlCLE9BQXJEOztBQUVBLFFBQUlDLFdBQVcsQ0FBZjtBQUNBLFVBQU0sMEJBQVUsdUJBQXNCQSxRQUFTLElBQUduQixVQUFVb0IsTUFBTyxFQUE3RDtBQUFBLDJDQUFnRSxXQUFPQyxhQUFQLEVBQXlCO0FBQzdGLGNBQU1DLGdCQUFnQixTQUFoQkEsYUFBZ0IsR0FBTTtBQUMxQkQsd0JBQWNFLElBQWQsR0FBc0IsdUJBQXNCSixRQUFTLElBQUduQixVQUFVb0IsTUFBTyxFQUF6RSxDQUQwQixDQUNrRDtBQUM3RSxTQUZEOztBQUlBLGNBQU0sa0JBQVFJLEdBQVIsQ0FBWXhCLFVBQVV5QixHQUFWLENBQWM7QUFBQSxpQkFDOUI7QUFBQSxpREFBWSxXQUFPQyxPQUFQLEVBQWdCQyxNQUFoQixFQUEyQjtBQUNyQyxvQkFBTUMsT0FBTyxTQUFQQSxJQUFPLENBQUNDLEdBQUQsRUFBUztBQUNwQixvQkFBSUEsR0FBSixFQUFTLE9BQU9GLE9BQU9FLEdBQVAsQ0FBUDtBQUNUViw0QkFBWSxDQUFaO0FBQ0FHO0FBQ0FJO0FBQ0QsZUFMRDs7QUFPQSxvQkFBTUksV0FBV3BCLE9BQU9xQixVQUFQLENBQWtCO0FBQ2pDQywyQkFBV0MsWUFEc0I7QUFFakNDLDBCQUFVO0FBQ1JDLDBCQUFROUIsU0FBU0ksTUFEVDtBQUVSMkIsdUJBQU0sR0FBRW5CLE1BQU8sSUFBRyxlQUFLb0IsUUFBTCxDQUFjSixZQUFkLENBQTRCLEVBRnRDO0FBR1JLLHVCQUFLakMsU0FBU2tDLE1BQVQsR0FBa0IsYUFBbEIsR0FBa0M7QUFIL0I7QUFGdUIsZUFBbEIsQ0FBakI7QUFRQTdDLGdCQUFFLFlBQUYsRUFBZ0J1QyxZQUFoQjs7QUFFQUgsdUJBQVNVLEVBQVQsQ0FBWSxPQUFaLEVBQXFCO0FBQUEsdUJBQU9aLEtBQUtDLEdBQUwsQ0FBUDtBQUFBLGVBQXJCO0FBQ0FDLHVCQUFTVSxFQUFULENBQVksVUFBWixFQUF3QixZQUFNO0FBQzVCOUMsa0JBQUcsb0JBQW1CLGVBQUsyQyxRQUFMLENBQWNKLFlBQWQsQ0FBNEIsS0FBSVEsS0FBS0MsS0FBTCxDQUFZWixTQUFTYSxjQUFULEdBQTBCYixTQUFTYyxhQUFwQyxHQUFxRCxHQUFoRSxDQUFxRSxHQUEzSDtBQUNELGVBRkQ7QUFHQWQsdUJBQVNVLEVBQVQsQ0FBWSxLQUFaLEVBQW1CO0FBQUEsdUJBQU1aLE1BQU47QUFBQSxlQUFuQjtBQUNELGFBdkJEOztBQUFBO0FBQUE7QUFBQTtBQUFBLGVBRDhCO0FBQUEsU0FBZCxDQUFaLENBQU47QUEwQkQsT0EvQks7O0FBQUE7QUFBQTtBQUFBO0FBQUEsU0FBTjtBQWdDRCxHIiwiZmlsZSI6InB1Ymxpc2hlcnMvczMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHMzIGZyb20gJ3MzJztcblxuaW1wb3J0IGFzeW5jT3JhIGZyb20gJy4uL3V0aWwvb3JhLWhhbmRsZXInO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOnB1Ymxpc2g6czMnKTtcblxuQVdTLnV0aWwudXBkYXRlKEFXUy5TMy5wcm90b3R5cGUsIHtcbiAgYWRkRXhwZWN0MTAwQ29udGludWU6IGZ1bmN0aW9uIGFkZEV4cGVjdDEwMENvbnRpbnVlKCkge1xuICAgIC8vIEhhY2sgYXJvdW5kIGxhcmdlIHVwbG9hZCBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2FuZHJld3JrL25vZGUtczMtY2xpZW50L2lzc3Vlcy83NFxuICB9LFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChhcnRpZmFjdHMsIHBhY2thZ2VKU09OLCBmb3JnZUNvbmZpZywgYXV0aFRva2VuLCB0YWcpID0+IHtcbiAgY29uc3QgczNDb25maWcgPSBmb3JnZUNvbmZpZy5zMztcbiAgczNDb25maWcuc2VjcmV0QWNjZXNzS2V5ID0gczNDb25maWcuc2VjcmV0QWNjZXNzS2V5IHx8IGF1dGhUb2tlbjtcbiAgaWYgKCEoczNDb25maWcuYWNjZXNzS2V5SWQgJiYgczNDb25maWcuc2VjcmV0QWNjZXNzS2V5ICYmIHMzQ29uZmlnLmJ1Y2tldCkpIHtcbiAgICB0aHJvdyAnSW4gb3JkZXIgdG8gcHVibGlzaCB0byBzMyB5b3UgbXVzdCBzZXQgdGhlIFwiczMuYWNjZXNzS2V5SWRcIiwgXCJwcm9jZXNzLmVudi5FTEVDVFJPTl9GT1JHRV9TM19TRUNSRVRfQUNDRVNTX0tFWVwiIGFuZCBcInMzLmJ1Y2tldFwiIHByb3BlcnRpZXMgaW4geW91ciBmb3JnZSBjb25maWcuIFNlZSB0aGUgZG9jcyBmb3IgbW9yZSBpbmZvJzsgLy8gZXNsaW50LWRpc2FibGUtbGluZVxuICB9XG5cbiAgZCgnY3JlYXRpbmcgczMgY2xpZW50IHdpdGggb3B0aW9uczonLCBzM0NvbmZpZyk7XG5cbiAgY29uc3QgY2xpZW50ID0gczMuY3JlYXRlQ2xpZW50KHtcbiAgICBzM0NsaWVudDogbmV3IEFXUy5TMyh7XG4gICAgICBhY2Nlc3NLZXlJZDogczNDb25maWcuYWNjZXNzS2V5SWQgfHwgcHJvY2Vzcy5lbnYuQVdTX0FDQ0VTU19LRVlfSUQsXG4gICAgICBzZWNyZXRBY2Nlc3NLZXk6IHMzQ29uZmlnLnNlY3JldEFjY2Vzc0tleSB8fCBwcm9jZXNzLmVudi5BV1NfU0VDUkVUX0FDQ0VTU19LRVksXG4gICAgfSksXG4gIH0pO1xuICBjbGllbnQuczMuYWRkRXhwZWN0MTAwQ29udGludWUgPSAoKSA9PiB7fTtcblxuICBjb25zdCBmb2xkZXIgPSBzM0NvbmZpZy5mb2xkZXIgfHwgdGFnIHx8IHBhY2thZ2VKU09OLnZlcnNpb247XG5cbiAgbGV0IHVwbG9hZGVkID0gMDtcbiAgYXdhaXQgYXN5bmNPcmEoYFVwbG9hZGluZyBBcnRpZmFjdHMgJHt1cGxvYWRlZH0vJHthcnRpZmFjdHMubGVuZ3RofWAsIGFzeW5jICh1cGxvYWRTcGlubmVyKSA9PiB7XG4gICAgY29uc3QgdXBkYXRlU3Bpbm5lciA9ICgpID0+IHtcbiAgICAgIHVwbG9hZFNwaW5uZXIudGV4dCA9IGBVcGxvYWRpbmcgQXJ0aWZhY3RzICR7dXBsb2FkZWR9LyR7YXJ0aWZhY3RzLmxlbmd0aH1gOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgfTtcblxuICAgIGF3YWl0IFByb21pc2UuYWxsKGFydGlmYWN0cy5tYXAoYXJ0aWZhY3RQYXRoID0+XG4gICAgICBuZXcgUHJvbWlzZShhc3luYyAocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IGRvbmUgPSAoZXJyKSA9PiB7XG4gICAgICAgICAgaWYgKGVycikgcmV0dXJuIHJlamVjdChlcnIpO1xuICAgICAgICAgIHVwbG9hZGVkICs9IDE7XG4gICAgICAgICAgdXBkYXRlU3Bpbm5lcigpO1xuICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCB1cGxvYWRlciA9IGNsaWVudC51cGxvYWRGaWxlKHtcbiAgICAgICAgICBsb2NhbEZpbGU6IGFydGlmYWN0UGF0aCxcbiAgICAgICAgICBzM1BhcmFtczoge1xuICAgICAgICAgICAgQnVja2V0OiBzM0NvbmZpZy5idWNrZXQsXG4gICAgICAgICAgICBLZXk6IGAke2ZvbGRlcn0vJHtwYXRoLmJhc2VuYW1lKGFydGlmYWN0UGF0aCl9YCxcbiAgICAgICAgICAgIEFDTDogczNDb25maWcucHVibGljID8gJ3B1YmxpYy1yZWFkJyA6ICdwcml2YXRlJyxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgZCgndXBsb2FkaW5nOicsIGFydGlmYWN0UGF0aCk7XG5cbiAgICAgICAgdXBsb2FkZXIub24oJ2Vycm9yJywgZXJyID0+IGRvbmUoZXJyKSk7XG4gICAgICAgIHVwbG9hZGVyLm9uKCdwcm9ncmVzcycsICgpID0+IHtcbiAgICAgICAgICBkKGBVcGxvYWQgUHJvZ3Jlc3MgKCR7cGF0aC5iYXNlbmFtZShhcnRpZmFjdFBhdGgpfSkgJHtNYXRoLnJvdW5kKCh1cGxvYWRlci5wcm9ncmVzc0Ftb3VudCAvIHVwbG9hZGVyLnByb2dyZXNzVG90YWwpICogMTAwKX0lYCk7XG4gICAgICAgIH0pO1xuICAgICAgICB1cGxvYWRlci5vbignZW5kJywgKCkgPT4gZG9uZSgpKTtcbiAgICAgIH0pXG4gICAgKSk7XG4gIH0pO1xufTtcbiJdfQ==